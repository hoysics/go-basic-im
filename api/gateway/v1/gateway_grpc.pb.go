// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: api/gateway/v1/gateway.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Gateway_Connect_FullMethodName = "/api.gateway.v1.Gateway/Connect"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Gateway_ConnectClient, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Gateway_ConnectClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], Gateway_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayConnectClient{ClientStream: stream}
	return x, nil
}

type Gateway_ConnectClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type gatewayConnectClient struct {
	grpc.ClientStream
}

func (x *gatewayConnectClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayConnectClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	Connect(Gateway_ConnectServer) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) Connect(Gateway_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).Connect(&gatewayConnectServer{ServerStream: stream})
}

type Gateway_ConnectServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type gatewayConnectServer struct {
	grpc.ServerStream
}

func (x *gatewayConnectServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayConnectServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gateway.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Gateway_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/gateway/v1/gateway.proto",
}

const (
	InnerGateway_DelConn_FullMethodName = "/api.gateway.v1.InnerGateway/DelConn"
	InnerGateway_PushMsg_FullMethodName = "/api.gateway.v1.InnerGateway/PushMsg"
)

// InnerGatewayClient is the client API for InnerGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InnerGatewayClient interface {
	DelConn(ctx context.Context, in *InnerGatewayRequest, opts ...grpc.CallOption) (*InnerGatewayResponse, error)
	PushMsg(ctx context.Context, in *InnerGatewayRequest, opts ...grpc.CallOption) (*InnerGatewayResponse, error)
}

type innerGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewInnerGatewayClient(cc grpc.ClientConnInterface) InnerGatewayClient {
	return &innerGatewayClient{cc}
}

func (c *innerGatewayClient) DelConn(ctx context.Context, in *InnerGatewayRequest, opts ...grpc.CallOption) (*InnerGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InnerGatewayResponse)
	err := c.cc.Invoke(ctx, InnerGateway_DelConn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innerGatewayClient) PushMsg(ctx context.Context, in *InnerGatewayRequest, opts ...grpc.CallOption) (*InnerGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InnerGatewayResponse)
	err := c.cc.Invoke(ctx, InnerGateway_PushMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InnerGatewayServer is the server API for InnerGateway service.
// All implementations must embed UnimplementedInnerGatewayServer
// for forward compatibility
type InnerGatewayServer interface {
	DelConn(context.Context, *InnerGatewayRequest) (*InnerGatewayResponse, error)
	PushMsg(context.Context, *InnerGatewayRequest) (*InnerGatewayResponse, error)
	mustEmbedUnimplementedInnerGatewayServer()
}

// UnimplementedInnerGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedInnerGatewayServer struct {
}

func (UnimplementedInnerGatewayServer) DelConn(context.Context, *InnerGatewayRequest) (*InnerGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConn not implemented")
}
func (UnimplementedInnerGatewayServer) PushMsg(context.Context, *InnerGatewayRequest) (*InnerGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMsg not implemented")
}
func (UnimplementedInnerGatewayServer) mustEmbedUnimplementedInnerGatewayServer() {}

// UnsafeInnerGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InnerGatewayServer will
// result in compilation errors.
type UnsafeInnerGatewayServer interface {
	mustEmbedUnimplementedInnerGatewayServer()
}

func RegisterInnerGatewayServer(s grpc.ServiceRegistrar, srv InnerGatewayServer) {
	s.RegisterService(&InnerGateway_ServiceDesc, srv)
}

func _InnerGateway_DelConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InnerGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnerGatewayServer).DelConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InnerGateway_DelConn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnerGatewayServer).DelConn(ctx, req.(*InnerGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InnerGateway_PushMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InnerGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnerGatewayServer).PushMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InnerGateway_PushMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnerGatewayServer).PushMsg(ctx, req.(*InnerGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InnerGateway_ServiceDesc is the grpc.ServiceDesc for InnerGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InnerGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gateway.v1.InnerGateway",
	HandlerType: (*InnerGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelConn",
			Handler:    _InnerGateway_DelConn_Handler,
		},
		{
			MethodName: "PushMsg",
			Handler:    _InnerGateway_PushMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gateway/v1/gateway.proto",
}
